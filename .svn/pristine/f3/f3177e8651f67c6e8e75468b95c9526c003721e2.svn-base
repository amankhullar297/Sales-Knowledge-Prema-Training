package com.prema.sales.daoImpl;

import java.util.List;

import javax.transaction.Transactional;
import org.hibernate.Query;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.prema.sales.dao.SalesKnowledgeDao;
import com.prema.sales.entity.SalesKnowledge;
@Repository
@Transactional
public class SalesKnowledgeDaoImpl implements SalesKnowledgeDao{
	
	@Autowired
	SessionFactory sessionFactory;

	@Override
	public String insert(SalesKnowledge sk) {
		try {
		System.out.println("trying to get session");
		Session session=sessionFactory.getCurrentSession();
		System.out.println("trying to save Salesknowledge record");
		int id=(int)session.save(sk);
		System.out.println("sales knowledge record inserted");
		return "sales knowledge record inserted successfully";
		}catch(Exception e) {
			e.printStackTrace();
			return "Error";
		}
		}

	@Override
	public String delete(int id) {
		try {
		System.out.println("trying to get session");
		Session session=sessionFactory.getCurrentSession();
		System.out.println("trying to delete salesknowledge record");
		SalesKnowledge sk=session.get(SalesKnowledge.class,  id);
		session.delete(sk);
		System.out.println("sales knowledge deleted");
		return "sales knowledge deleted successfully with id="+id;
		}catch(Exception e) {
			e.printStackTrace();
			return "Error";
		}
		}

	@Override
	public String update(SalesKnowledge sk) {
		try {
		System.out.println("trying to get session");
		Session session=sessionFactory.getCurrentSession();
		System.out.println("trying to update salesknowledge record");
		session.update(sk);
		System.out.println("salesknowledge record updated");
	
		return "salesknowledge record updated uccessfully";
	}catch(Exception e) {
		e.printStackTrace();
		return "Error";
	}
		}

	
	@Override
	public List<SalesKnowledge> selectByOrgId(int orgId) {
		try {
			System.out.println("trying to get session");
			Session session=sessionFactory.getCurrentSession();
			
			String query = "from SalesKnowledge where empId in (select empId from OrgEmployee where orgId=:n)";
			Query q=session.createQuery(query).setParameter("n",orgId);
			System.out.println(q);
			//q.setInteger("n", 1);
			System.out.println("query created"+q);
			List<SalesKnowledge> list=q.list();
			System.out.println(list);
			return list;
			}catch(Exception e) {
				e.printStackTrace();
				return null;
			}
		
	}

	@Override
	public List<SalesKnowledge> selectBySalesId(int salesId) {
		try {
			System.out.println("trying to get session");
			Session session=sessionFactory.getCurrentSession();
			
			String query = "from SalesKnowledge where salesId=:n";
			Query q=session.createQuery(query).setParameter("n",salesId);
			System.out.println(q);
			//q.setInteger("n", 1);
			System.out.println("query created"+q);
			List<SalesKnowledge> list=q.list();
			System.out.println(list);
			return list;
			}catch(Exception e) {
				e.printStackTrace();
				return null;
			}
	}

	@Override
	public List<SalesKnowledge> selectByOrgAndSalesId(int orgId, int salesId) {
		try {
			System.out.println("trying to get session");
			Session session=sessionFactory.getCurrentSession();
			
			String query = "from SalesKnowledge where salesId=:n and empId in (select empId from OrgEmployee where orgId=:m)";
			Query q=session.createQuery(query);
			System.out.println(q);
			q.setInteger("n", 1);
			q.setInteger("m", 2);
			
			System.out.println("query created"+q);
			List<SalesKnowledge> list=q.list();
			System.out.println(list);
			return list;
			}catch(Exception e) {
				e.printStackTrace();
				return null;
			}	}

	@Override
	public List<SalesKnowledge> selectByOrgAndSalesAndProductId(int orgId, int salesId, int productId) {
		try {
			System.out.println("trying to get session");
			Session session=sessionFactory.getCurrentSession();
			
			String query = "from SalesKnowledge where salesId=:n and empId in (select empId from OrgEmployee where orgId=:m) and productId=:p";
			Query q=session.createQuery(query);
			System.out.println(q);
			q.setInteger("n", 1);
			q.setInteger("m", 2);
			q.setInteger("p", 3);
			
			System.out.println("query created"+q);
			List<SalesKnowledge> list=q.list();
			System.out.println(list);
			return list;
			}catch(Exception e) {
				e.printStackTrace();
				return null;
			}	}
	

	@Override
	public List<SalesKnowledge> selectByProductId(int productId) {
		try {
			System.out.println("trying to get session");
			Session session=sessionFactory.getCurrentSession();
			
			String query = "from SalesKnowledge where productId=:p";
			Query q=session.createQuery(query);
			System.out.println(q);
						q.setInteger("p", 1);
			
			System.out.println("query created"+q);
			List<SalesKnowledge> list=q.list();
			System.out.println(list);
			return list;
			}catch(Exception e) {
				e.printStackTrace();
				return null;
				}
	
	}

	@Override
	public List<SalesKnowledge> selectByClientAndProductId(int clientId, int productId) {
		try {
			System.out.println("trying to get session");
			Session session=sessionFactory.getCurrentSession();
			
			String query = "from SalesKnowledge where clientId=:m and  productId=:n";
			Query q=session.createQuery(query);
			System.out.println(q);
			q.setInteger("m", 1);
			q.setInteger("n", 2);
			
			
			System.out.println("query created"+q);
			List<SalesKnowledge> list=q.list();
			System.out.println(list);
			return list;
			}catch(Exception e) {
				e.printStackTrace();
				return null;
				}
	
	}

	@Override
	public List<SalesKnowledge> selectByClientId(int clientId) {
		try {
			System.out.println("trying to get session");
			Session session=sessionFactory.getCurrentSession();
			
			String query = "from SalesKnowledge where clientId=:n ";
			Query q=session.createQuery(query);
			System.out.println(q);
			q.setInteger("n", 1);
			
			
			System.out.println("query created"+q);
			List<SalesKnowledge> list=q.list();
			System.out.println(list);
			return list;
			}catch(Exception e) {
				e.printStackTrace();
				return null;
				}
	
	}

	@Override
	public SalesKnowledge findById(int salesId) {
		try {
			System.out.println("trying to get session");
			Session session=sessionFactory.getCurrentSession();
			SalesKnowledge s=session.get(SalesKnowledge.class, salesId);
			System.out.println("data found"+s);
			return s;
			
			}catch(Exception e) {
				e.printStackTrace();
				return null;
				}
	
	}

	 
	 
	

}
